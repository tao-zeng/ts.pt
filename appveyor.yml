# encrypt
# https://ci.appveyor.com/tools/encrypt
# validate
# https://ci.appveyor.com/tools/validate-yaml
# Build API
# https://www.appveyor.com/docs/build-worker-api
# https://www.appveyor.com/docs/build-configuration/#script-blocks-in-build-configuration

version: "{build}"
image: Visual Studio 2015

cache:
  - node_modules -> package.json
  - package-lock.json -> package.json

environment:
  CI_NAME: 'appveyor'
  NODEJS_VERSION: '10'
  NPM_TOKEN:
    secure: zTogpCh9AtlTR+osabCb9UMXMtIT8qTE0Rvay78bTORSysIVo5Ev+y6oOsHdDSO9
  GH_TOKEN:
    secure: wMVG1uvMB8qswngCrsL0eg6E/7HEaCjbAmXFM26V+sVO1OnP1/mgMu6kGX2uCWm0
  COVERALLS_REPO_TOKEN:
    secure: GVfYdXChXxEWFSfuXsHyGKcyAc97WrFQ17u4S07CtyOLTqB6z0Pb6ZmgHMgIfoKp

init:
  - git config --global core.autocrlf input
  - ps: |
      function PrintMessage($message, $Category="Information")
      {
        if (-not $Category) {
            $Category = "Information"
        }
        Write-Host $message
        Add-AppveyorMessage $message -Category $Category
      }
      $timePoints = New-Object -TypeName System.Collections.ArrayList
      function StartPrintMessage($message, $Category)
      {
        $timePoints.add($(GET-DATE))|Out-Null
        PrintMessage $message $Category
      }
      function EndPrintMessage($message, $Category)
      {
        PrintMessage "$message use $($(New-TimeSpan $timePoints[$timePoints.COUNT - 1]).TotalSeconds)s" $Category
        $timePoints.removeAt($timePoints.COUNT - 1)
      }
      function ParseNextVersion($message, $error)
      {
        $lastErr = $LastExitCode
        Write-Host $message
        if ($error -and $lastErr -ne 0) {
          PrintMessage $error -Category Warning
        }
        if ($message -join "`n"  -match "The Next release version is ([^\r\n]+)") {
          return $Matches[1]
        }
      }
      function LoadLastTag() {
        git fetch --tags
        return git tag -l --merged origin/$env:APPVEYOR_REPO_BRANCH --sort=-taggerdate | Select-Object -Index 0  | %{$_ -replace "^v|@.+$",""}
      }
      function Tag2Version($tag) {
        return $tag -replace "^v|@.+$",""
      }


install:
  # install nodejs
  - ps: Install-Product node $env:NODEJS_VERSION
  - ps: |
      PrintMessage "The build worker image is $env:APPVEYOR_BUILD_WORKER_IMAGE"
      PrintMessage "The node version is $(node --version)"
      PrintMessage "The npm version is $(npm --version)"

  # install dependencies
  - ps: StartPrintMessage "Installing develop dependencies..."
  - npm install -g coveralls
  - npm install
  - ps: EndPrintMessage "Install develop dependencies"
  # update build details
  - ps: |
      StartPrintMessage "Updating Build Details..."
      $nextVersion = $null
      $nextRelease = $null
      # load the previous release version(tag) on the branch
      PrintMessage "loading the previous release version..."
      $previousVersion = Tag2Version $(LoadLastTag)
      if (-not $previousVersion) { $previousVersion = "$(node -p "require('./package.json').version")" }
      $previousRelease = "$env:APPVEYOR_REPO_BRANCH@$previousVersion"
      PrintMessage "The previous release version is $previousVersion on $env:APPVEYOR_REPO_BRANCH"
      # update the build version
      Update-AppveyorBuild -Version "$previousRelease - $env:APPVEYOR_BUILD_NUMBER"
      # parse the build message
      $buildMessage = "Develop Test on $previousRelease"
      if ($env:APPVEYOR_PULL_REQUEST_NUMBER) {
        # build on request pull
        $buildMessage = "Develop Test for RP($env:APPVEYOR_PULL_REQUEST_NUMBER) on $previousRelease"
      } elseif ($env:APPVEYOR_REPO_TAG_NAME) {
        # build on tag
        $buildMessage = "Release Test for $previousRelease"
      } else {
        # check the next release version
        PrintMessage "Checking next release version..."
        $nextVersion = ParseNextVersion $(npx cross-env prerelease=true semantic-release -d) "Check the next release version with error`:` $LastExitCode"
        if ($nextVersion) {
          $nextRelease = "$env:APPVEYOR_REPO_BRANCH@$nextVersion"
          $buildMessage = "Release $nextRelease <- $previousVersion"
          PrintMessage "The next release version is $nextVersion on $env:APPVEYOR_REPO_BRANCH"
        } else {
          PrintMessage "No next release version"
        }
      }
      PrintMessage $buildMessage
      # update build message
      Update-AppveyorBuild -Message $buildMessage
      EndPrintMessage "Updated Build Details"

before_build:
  - ps: StartPrintMessage "Compiling..."

build_script:
  - npm run package

after_build:
  - ps: EndPrintMessage "Compiled"

before_test:
  - ps: StartPrintMessage "Running Tests..."

test_script:
  # test on nodejs
  - ps: StartPrintMessage "Running Tests on Node$(node --version)..."
  - npm run unit:node
  - ps: EndPrintMessage "Run Tests on Node$(node --version)"
  # test on browsers
  - ps: StartPrintMessage "Running Tests on IE8,IE9,Chrome by Karma..."
  - npm run unit:browser -- --browsers IE8,IE9,Chrome --single-run
  - ps: EndPrintMessage "Run Tests on IE8,IE9,Chrome by Karma"
  # test on lower browsers
  - ps: StartPrintMessage "Running Tests on IE6,IE7 by Karma(no-iframe)..."
  - npm run unit:browser -- --browsers IE6,IE7 --single-run --no-iframe
  - ps: EndPrintMessage "Run Tests on IE6,IE7 by Karma(no-iframe)"

after_test:
  - ps: EndPrintMessage "Run all Tests"
  # upload coverage
  - ps: StartPrintMessage "Uploading coverage by coveralls"
  - cat coverage/*/lcov.info | coveralls
  - ps: EndPrintMessage "Uploaded coverage by coveralls"

deploy_script:
  - ps: |
      if ($nextVersion) {
        # release
        StartPrintMessage "Releasing $nextRelease <- $previousVersion..."
        # read the package name of npm registry
        $package = node -p "require('./package.json').name"
        $nextPackage = $null
        # do release
        $nextVersion = ParseNextVersion $(npx semantic-release) "Release $nextRelease <- $previousVersion with error`:` $LastExitCode"
        if ($nextVersion) {
          $nextRelease = "$env:APPVEYOR_REPO_BRANCH@$nextVersion"
          $nextPackage = "$package@$nextVersion"
          Update-AppveyorBuild -Message "Release $nextRelease <- $previousVersion"
          PrintMessage "Released $nextRelease <- $previousVersion"
        } else {
          PrintMessage "Release $nextRelease <- $previousVersion failed"
          $host.SetShouldExit(-1)
        }
        # check the released tag
        PrintMessage "Checking the released tag on $nextRelease"
        $nextTag = LoadLastTag
        if ($nextVersion -ne $(Tag2Version $nextTag))
        {
          # no release tag
          PrintMessage "Release $nextRelease fail, can't find the git tag of $nextVersion" -Category Error
          if ($(npm view $nextPackage version))
          {
            PrintMessage "Rollback the npm package`:` $nextPackage"
            npm unpublish $nextPackage
          }
          $host.SetShouldExit(-1)
        }
        # check the published package
        if (-not $(npm view $nextPackage version))
        {
          # no npm package
          PrintMessage "Release $nextRelease failed, can't find the npm package $nextPackage" -Category Error
          PrintMessage "Rollback the git tag`:` $nextTag"
          git push --delete origin $nextTag
          $host.SetShouldExit(-1)
        }
        # release end
        EndPrintMessage "Released $nextRelease <- $previousVersion"
      }
